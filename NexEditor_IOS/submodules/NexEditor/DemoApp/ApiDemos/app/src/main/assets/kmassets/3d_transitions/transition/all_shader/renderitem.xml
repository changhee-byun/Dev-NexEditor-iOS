<?xml version="1.0" encoding="utf-8"?>
<renderitem xmlns="http://schemas.kinemaster.com/km/renderitem" main="mainScript"
            id="com.nexstreaming.all"
            type="transition"
            intime="1500"
            outtime="0"
            intimefirst="1500"
            outtimelast="0"
            repeat="no"
			screentype="ALPHA|DEPTH"
            name="max_transition">

      <parameter id="f_block_size" type="range" default="10" minvalue="1" maxvalue="20">
            <string name="label" lang="en">Blur Strength</string>
      </parameter>

      <userfield default="0" id="effect1" type="selection">
            <option value="0">
                  <fieldlabel locale="en" value="none" />
            </option>
            <option value="1">
                  <fieldlabel locale="en" value="beautyshot" />
            </option>
            <option value="2">
                  <fieldlabel locale="en" value="black and white" />
            </option>
            <option value="3">
                  <fieldlabel locale="en" value="cartoon 1" />
            </option>
            <option value="4">
                  <fieldlabel locale="en" value="cartoon 2" />
            </option>
            <option value="5">
                  <fieldlabel locale="en" value="sketch black" />
            </option>
            <option value="6">
                  <fieldlabel locale="en" value="sketch color" />
            </option>
            <option value="7">
                  <fieldlabel locale="en" value="swirl" />
            </option>
            <option value="8">
                  <fieldlabel locale="en" value="vignette" />
            </option>
            <option value="9">
                  <fieldlabel locale="en" value="blur" />
            </option>
            <option value="10">
                  <fieldlabel locale="en" value="mosaic" />
            </option>
      </userfield>

      <userfield default="0" id="effect2" type="selection">
            <option value="0">
                  <fieldlabel locale="en" value="none" />
            </option>
            <option value="1">
                  <fieldlabel locale="en" value="beautyshot" />
            </option>
            <option value="2">
                  <fieldlabel locale="en" value="black and white" />
            </option>
            <option value="3">
                  <fieldlabel locale="en" value="cartoon 1" />
            </option>
            <option value="4">
                  <fieldlabel locale="en" value="cartoon 2" />
            </option>
            <option value="5">
                  <fieldlabel locale="en" value="sketch black" />
            </option>
            <option value="6">
                  <fieldlabel locale="en" value="sketch color" />
            </option>
            <option value="7">
                  <fieldlabel locale="en" value="swirl" />
            </option>
            <option value="8">
                  <fieldlabel locale="en" value="vignette" />
            </option>
            <option value="9">
                  <fieldlabel locale="en" value="blur" />
            </option>
            <option value="10">
                  <fieldlabel locale="en" value="mosaic" />
            </option>
      </userfield>

      <texture name="sketch" src ="res/sketch.jpg"/>

      <shader name="filters_common_vertex" language="glsl" src="glsl/filters_common_vertex.glsl"/>
      <shader name="filters_common_resolfactor_vertex" language="glsl" src="glsl/filters_common_resolfactor_vertex.glsl"/>
      <shader name="filters_blurH_vertex" language="glsl" src="glsl/filters_blurH_vertex.glsl"/>
      <shader name="filters_blurV_vertex" language="glsl" src="glsl/filters_blurV_vertex.glsl"/>

      <shader name="filters_beautyshot_fragment" language="glsl" src="glsl/filters_beautyshot_fragment.glsl"/>
      <shader name="filters_blackandwhite_fragment" language="glsl" src="glsl/filters_blackandwhite_fragment.glsl"/>
      <shader name="filters_cartoon1_fragment" language="glsl" src="glsl/filters_cartoon1_fragment.glsl"/>
      <shader name="filters_cartoon2_fragment" language="glsl" src="glsl/filters_cartoon2_fragment.glsl"/>
      <shader name="filters_sketchblack_fragment" language="glsl" src="glsl/filters_sketchblack_fragment.glsl"/>
      <shader name="filters_sketchcolor_fragment" language="glsl" src="glsl/filters_sketchcolor_fragment.glsl"/>
      <shader name="filters_blur_fragment" language="glsl" src="glsl/filters_blur_fragment.glsl"/>      
      <shader name="filters_swirl_fragment" language="glsl" src="glsl/filters_swirl_fragment.glsl"/>
      <shader name="filters_vignetting_fragment" language="glsl" src="glsl/filters_vignetting_fragment.glsl"/>

      <program name="BSFx" language="glsl" fragmentShader="filters_beautyshot_fragment" vertexShader="filters_common_vertex" />
      <program name="BWFx" language="glsl" fragmentShader="filters_blackandwhite_fragment" vertexShader="filters_common_vertex" />
      <program name="COFx" language="glsl" fragmentShader="filters_cartoon1_fragment" vertexShader="filters_common_vertex" />
      <program name="CATFx" language="glsl" fragmentShader="filters_cartoon2_fragment" vertexShader="filters_common_vertex" />
      <program name="SBFx" language="glsl" fragmentShader="filters_sketchblack_fragment" vertexShader="filters_common_vertex" />
      <program name="SCFx" language="glsl" fragmentShader="filters_sketchcolor_fragment" vertexShader="filters_common_vertex" />
      <program name="SWFx" language="glsl" fragmentShader="filters_swirl_fragment" vertexShader="filters_common_resolfactor_vertex" />
      <program name="VIFx" language="glsl" fragmentShader="filters_vignetting_fragment" vertexShader="filters_common_vertex" />
      <program name="BHFx" language="glsl" fragmentShader="filters_blur_fragment" vertexShader="filters_blurH_vertex" />
      <program name="BVFx" language="glsl" fragmentShader="filters_blur_fragment" vertexShader="filters_blurV_vertex" />

	<nexeffect name="box" src="nexeffect/filter_shine.nef"/>
	<script name="mainScript" language="lua"><![CDATA[

            filterTable = {}

            filterTable[0] = function(src_tex_id)

                  return src_tex_id
            end

            filterTable[1] = function(src_tex_id)

                  w = kmGetTexWidth(src_tex_id)
                  h = kmGetTexHeight(src_tex_id)
                  res_tex = kmSetRenderToTexture(w, h)
                  mvp_matrix = kmNewMatrix()
                  kmLoadIdentity(mvp_matrix)
                  BSFx.setMvpMatrix(mvp_matrix)
                  kmSetTexture(0, src_tex_id, program.BSFx.u_sTexture0)
                  kmSetUniform2f(program.BSFx.u_v2Resolution,w,h)
                  BSFx.drawRect(2, 2)

                  return res_tex
            end

            filterTable[2] = function(src_tex_id)

                  w = kmGetTexWidth(src_tex_id)
                  h = kmGetTexHeight(src_tex_id)
                  res_tex = kmSetRenderToTexture(w, h)
                  mvp_matrix = kmNewMatrix()
                  kmLoadIdentity(mvp_matrix)
                  BWFx.setMvpMatrix(mvp_matrix)
                  kmSetTexture(0, src_tex_id, program.BWFx.u_sTexture0)
                  BWFx.drawRect(2, 2)

                  return res_tex
            end

            filterTable[3] = function(src_tex_id)

                  w = kmGetTexWidth(src_tex_id)
                  h = kmGetTexHeight(src_tex_id)
                  res_tex = kmSetRenderToTexture(w, h)
                  mvp_matrix = kmNewMatrix()
                  kmLoadIdentity(mvp_matrix)
                  COFx.setMvpMatrix(mvp_matrix)
                  kmSetTexture(0, src_tex_id, program.COFx.u_sTexture0)
                  kmSetUniform2f(program.COFx.u_v2Resolution,w,h)
                  COFx.drawRect(2, 2)

                  return res_tex
            end

            filterTable[4] = function(src_tex_id)

                  w = kmGetTexWidth(src_tex_id)
                  h = kmGetTexHeight(src_tex_id)
                  res_tex = kmSetRenderToTexture(w, h)
                  mvp_matrix = kmNewMatrix()
                  kmLoadIdentity(mvp_matrix)
                  CATFx.setMvpMatrix(mvp_matrix)
                  kmSetTexture(0, src_tex_id, program.CATFx.u_sTexture0)
                  kmSetUniform2f(program.CATFx.u_v2Resolution,w,h)
                  CATFx.drawRect(2, 2)
                  return res_tex
            end

            filterTable[5] = function(src_tex_id)

                  w = kmGetTexWidth(src_tex_id)
                  h = kmGetTexHeight(src_tex_id)
                  res_tex = kmSetRenderToTexture(w, h)
                  mvp_matrix = kmNewMatrix()
                  kmLoadIdentity(mvp_matrix)
                  SBFx.setMvpMatrix(mvp_matrix)
                  kmSetTexture(0, src_tex_id, program.SBFx.u_sTexture0)
                  kmSetTexture(1, texture.sketch, program.SBFx.u_sTexture1)
                  kmSetUniform2f(program.SBFx.u_v2Resolution,w,h)
                  SBFx.drawRect(2, 2)
                  return res_tex
            end

            filterTable[6] = function(src_tex_id)

                  w = kmGetTexWidth(src_tex_id)
                  h = kmGetTexHeight(src_tex_id)
                  res_tex = kmSetRenderToTexture(w, h)
                  mvp_matrix = kmNewMatrix()
                  kmLoadIdentity(mvp_matrix)
                  SCFx.setMvpMatrix(mvp_matrix)
                  kmSetTexture(0, src_tex_id, program.SCFx.u_sTexture0)
                  kmSetTexture(1, texture.sketch, program.SCFx.u_sTexture1)
                  kmSetUniform2f(program.SCFx.u_v2Resolution,w,h)
                  SCFx.drawRect(2, 2)
                  return res_tex
            end

            filterTable[7] = function(src_tex_id)

                  w = kmGetTexWidth(src_tex_id)
                  h = kmGetTexHeight(src_tex_id)
                  src_h = kmGetSrcHeight(src_tex_id)
                  src_w = kmGetSrcWidth(src_tex_id)
                  res_tex = kmSetRenderToTexture(w, h)
                  kmClear(GL_COLOR_BUFFER_BIT)
                  mvp_matrix = kmNewMatrix()
                  kmLoadIdentity(mvp_matrix)
                  SWFx.setMvpMatrix(mvp_matrix)
                  kmSetTexture(0, src_tex_id, program.SWFx.u_sTexture0)
                  kmSetUniform2f(program.SWFx.u_v2Resolution,w,h)
                  kmSetUniform2f(program.SWFx.u_v2SrcResolution,src_w,src_h)
                  SWFx.drawRect(2, 2)
                  return res_tex
            end

            filterTable[8] = function(src_tex_id)

                  w = kmGetTexWidth(src_tex_id)
                  h = kmGetTexHeight(src_tex_id)
                  src_h = kmGetSrcHeight(src_tex_id)
                  src_w = kmGetSrcWidth(src_tex_id)
                  res_tex = kmSetRenderToTexture(w, h)
                  mvp_matrix = kmNewMatrix()
                  kmLoadIdentity(mvp_matrix)
                  VIFx.setMvpMatrix(mvp_matrix)
                  kmSetTexture(0, src_tex_id, program.VIFx.u_sTexture0)
                  kmSetUniform2f(program.VIFx.u_v2Resolution,w,h)             
                  kmSetUniform2f(program.VIFx.u_v2SrcResolution,src_w,src_h)
                  VIFx.drawRect(2, 2)
                  return res_tex
            end

            filterTable[9] = function(src_tex_id)

                  w = kmGetTexWidth(src_tex_id) * 1280 / kmGetOutputWidth()
                  h = kmGetTexHeight(src_tex_id) * 720 / kmGetOutputHeight()
                  first_pass_tex = kmSetRenderToTexture(w / range.f_block_size, h)
                  mvp_matrix = kmNewMatrix()
                  kmLoadIdentity(mvp_matrix)
                  BHFx.setMvpMatrix(mvp_matrix)
                  BHFx.setTextureSize(w / range.f_block_size, h)
                  BHFx.setSTexture0(src_tex_id)
                  BHFx.drawRect(2, 2)

                  kmSetRenderToDefault()
                  res_tex = kmSetRenderToTexture(w / range.f_block_size, h / range.f_block_size)
                  BVFx.setMvpMatrix(mvp_matrix)
                  BVFx.setTextureSize(w / range.f_block_size, h / range.f_block_size)
                  BVFx.setSTexture0(first_pass_tex)
                  BVFx.drawRect(2, 2)
                  return res_tex
            end

            filterTable[10] = function(src_tex_id)

                  w = kmGetTexWidth(src_tex_id) * 1280 / kmGetOutputWidth()
                  h = kmGetTexHeight(src_tex_id) * 720 / kmGetOutputHeight()
                  res_tex = kmSetRenderToTexture(w / (range.f_block_size * 2), h / (range.f_block_size * 2))
                  mvp_matrix = kmNewMatrix()
                  kmLoadIdentity(mvp_matrix)
                  kmDrawTexBox(src_tex_id, mvp_matrix, -1, 1, 1, -1)
                  return res_tex
            end


		function main()
                  selected_effect = nexeffect.box
                  kmFilteredSrcOnNexEffect(1, filterTable[selection.effect1.x](system.video_left.id))
                  kmFilteredSrcOnNexEffect(2, filterTable[selection.effect2.x](system.video_right.id))
                  kmSetRenderToDefault()
			kmDrawNexEffectEasy(selected_effect, system.play_percentage * kmGetFrameNexEffect(selected_effect), 0)
		end

		]]></script>
</renderitem>