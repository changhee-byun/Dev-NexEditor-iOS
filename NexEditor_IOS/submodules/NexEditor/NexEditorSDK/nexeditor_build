#!/bin/bash
	
## declare variable
SECURE_CONFIG_PATH=""
TARGET_PROJECT=""
TARGET_PROJECT_PATH="./nexeditorengine/obj/nexeditor_target_project"

BUILD_PROJECT_ARRAY=("LGE" "Default" "Kinemaster Debug" "Kinemaster Release" "Gionee" "RSupport" "Xiaomi" "Transsion" "Tinno" "ZTE" "Vivo" "Oppo" "OnePlus" "SP")
BUILD_ABI_ARRAY=("armeabi-v7a" "arm64-v8a" "x86" "x86_64" "Android(armeabi-v7a arm64-v8a)" "KineMaster(armeabi-v7a x86)" "All(armeabi-v7a arm64-v8a x86 x86_64)")
BUILD_OPTION=""
BUILD_SCRIPT=""
BUILD_APP_PLATFORM="android-16"
BUILD_APP_ABI=""
BUILD_APP_CFLAG=""
BUILD_APP_EXTRA_CFLAG="NEX"
BUILD_MODULE_POSTFIX=""
BUILD_MODULE_AACENC="HW_AACENC"
# In order to speed up the ndk-build, set "-jN" to BUILD_OPTION_FOR_NDK_MULTITHREAD
#BUILD_OPTION_FOR_NDK_MULTITHREAD=""
BUILD_OPTION_FOR_NDK_MULTITHREAD="-j8"

AUTO_RELEASE_DIRECTORY_PATH="../Release"

CURRENT_PATH=`pwd`

## declare function
function help() 
{
	echo "Usage: $0 [option...] " >&2
	echo
	echo "   clean				remove any previously generated binaries."
	echo "   choosecombo				one step build. For more information, command ./nexecitor_build choosecombo_help"
	echo "   -C,-c,--clean-build			force a complete rebuild."
	echo "   -H,-h,--help				show help text of nexeditor project."
	echo "   -CK,-ck,--change-keyczarpath		change keyczar path"
	echo "   -GB,-gb,--gradle-build		build only gradle."
	echo "   -NB,-nb,--native-build		build only native."
	echo "   -AR,-ar,--auto-release		auto release."
	echo "   -AD,-ad,--apidemos	buildnum  build ApiDemos app."
	echo "   -KR,-kr,--kine-release		sdk release for kinemaster."
	echo
}

function choosecombo_help()
{
	echo
	echo "Selectable project."
	for (( i = 0 ; i < ${#BUILD_PROJECT_ARRAY[@]} ; i++ )) ; do
		echo "$(($i+1)). ${BUILD_PROJECT_ARRAY[$i]}"
	done

	echo
	echo "Selectable abi."
	for (( i = 0 ; i < ${#BUILD_ABI_ARRAY[@]} ; i++ )) ; do
		echo "$(($i+1)). ${BUILD_ABI_ARRAY[$i]}"
	done

	echo
	echo "Usage: choosecombo [option...] "
	echo "   -C,-c,--clean-build			force a complete rebuild."
	echo
}

function clean()
{
	echo "rm -r ./nexeditorengine/libs"
	echo "rm -r ./nexeditorengine/obj"
	echo "rm -r ./build"
	echo "rm -r ./app/build"
	echo "rm -r ./nexeditorsdk/build"
	echo "rm -r $AUTO_RELEASE_DIRECTORY_PATH/package"
	echo "rm -f $AUTO_RELEASE_DIRECTORY_PATH/*.apk"
	echo "rm -f $AUTO_RELEASE_DIRECTORY_PATH/*.html"

	if [ -d ./nexeditorengine/libs ]
	then
		rm -r ./nexeditorengine/libs
	else
		echo "./nexeditorengine/libs is already removed"
	fi
	
	if [ -d ./nexeditorengine/obj ]
	then
		rm -r ./nexeditorengine/obj
	else
		echo "./nexeditorengine/obj is already removed"
	fi
	
	if [ -d ./build ]
	then
		rm -r ./build
	else
		echo "./build is already removed"
	fi
	
	
	if [ -d ./app/build ]
	then
		rm -r ./app/build
	else
		echo "./app/build is already removed"
	fi
	
	if [ -d ./nexeditorsdk/build ]
	then
		rm -r ./nexeditorsdk/build
	else
		echo "./nexeditorsdk/build is already removed"
	fi

	if [ -d $AUTO_RELEASE_DIRECTORY_PATH/package ]
	then
		rm -r $AUTO_RELEASE_DIRECTORY_PATH/package
	else
		echo "$AUTO_RELEASE_DIRECTORY_PATH/package is already removed"
	fi
	
	rm -f $AUTO_RELEASE_DIRECTORY_PATH/*.apk
	rm -f $AUTO_RELEASE_DIRECTORY_PATH/*.html
}

function write_target_project_to_file()
{
	if [ -f $TARGET_PROJECT_PATH ]
	then
		rm -r $TARGET_PROJECT_PATH
	fi
	
	echo -n $TARGET_PROJECT >> $TARGET_PROJECT_PATH
}

function ndk_build()
{	
	echo "${ANDROID_NDK_ROOT}/ndk-build $BUILD_OPTION NDK_PROJECT_PATH=./nexeditorengine/ APP_BUILD_SCRIPT=./nexeditorengine/$BUILD_SCRIPT APP_CFLAGS+=-D$BUILD_APP_CFLAG APP_CFLAGS+=-D$BUILD_APP_EXTRA_CFLAG APP_CFLAGS+=-D$BUILD_MODULE_AACENC APP_STL=stlport_static APP_PLATFORM=$BUILD_APP_PLATFORM STLPORT_FORCE_REBUILD=true APP_ABI="$BUILD_APP_ABI" USE_NDK=true $BUILD_OPTION_FOR_NDK_MULTITHREAD"

	${ANDROID_NDK_ROOT}/ndk-build $BUILD_OPTION NDK_PROJECT_PATH=./nexeditorengine/ APP_BUILD_SCRIPT=./nexeditorengine/$BUILD_SCRIPT APP_CFLAGS+=-D$BUILD_APP_CFLAG APP_CFLAGS+=-D$BUILD_APP_EXTRA_CFLAG APP_CFLAGS+=-D$BUILD_MODULE_AACENC APP_STL=stlport_static APP_PLATFORM=$BUILD_APP_PLATFORM STLPORT_FORCE_REBUILD=true APP_ABI="$BUILD_APP_ABI" USE_NDK=true $BUILD_OPTION_FOR_NDK_MULTITHREAD
	# is success ndk build
	if [ $? -ne 0 ]
	then
	    exit 1
	fi
}

function copy_binarys_from_engine_to_sdk()
{
	
	# copy so files
	echo "rm -r ./nexeditorsdk/src/main/jniLibs/*"
	rm -r ./nexeditorsdk/src/main/jniLibs/*

	app_abis=$(echo $BUILD_APP_ABI | tr " " "\n")

	for abi in $app_abis
	do
	    echo "copy_binarys_from_engine_to_sdk -> $abi"
	    echo "mkdir ./nexeditorsdk/src/main/jniLibs/$abi"
		mkdir ./nexeditorsdk/src/main/jniLibs/$abi

		echo "cp ./nexeditorengine/libs/$abi/libnexcralbody_mc_jb.so ./nexeditorsdk/src/main/jniLibs/$abi/libnexcralbody_mc_jb$BUILD_MODULE_POSTFIX.so"
		echo "cp ./nexeditorengine/libs/$abi/libnexeditorsdk.so          ./nexeditorsdk/src/main/jniLibs/$abi/libnexeditorsdk$BUILD_MODULE_POSTFIX.so"
		echo "cp ./nexeditorengine/libs/$abi/libnexralbody_audio.so  ./nexeditorsdk/src/main/jniLibs/$abi/libnexralbody_audio$BUILD_MODULE_POSTFIX.so"
		echo "cp ./nexeditorengine/libs/$abi/libwrapnexpcmcalbody.so  ./nexeditorsdk/src/main/jniLibs/$abi/libwrapnexpcmcalbody$BUILD_MODULE_POSTFIX.so"
		echo "cp ./nexeditorengine/libs/$abi/libwrapnexflaccalbody.so  ./nexeditorsdk/src/main/jniLibs/$abi/libwrapnexflaccalbody$BUILD_MODULE_POSTFIX.so"

		if [ "$BUILD_MODULE_AACENC" == "SW_AACENC" ]
		then
		echo "cp ./nexeditorengine/libs/$abi/libnexcalbody_aacenc.so  ./nexeditorsdk/src/main/jniLibs/$abi/libnexcalbody_aacenc$BUILD_MODULE_POSTFIX.so"		
		fi

		cp ./nexeditorengine/libs/$abi/libnexcralbody_mc_jb.so 	./nexeditorsdk/src/main/jniLibs/$abi/libnexcralbody_mc_jb$BUILD_MODULE_POSTFIX.so
		cp ./nexeditorengine/libs/$abi/libnexeditorsdk.so		./nexeditorsdk/src/main/jniLibs/$abi/libnexeditorsdk$BUILD_MODULE_POSTFIX.so
		cp ./nexeditorengine/libs/$abi/libnexralbody_audio.so 	./nexeditorsdk/src/main/jniLibs/$abi/libnexralbody_audio$BUILD_MODULE_POSTFIX.so
		cp ./nexeditorengine/libs/$abi/libwrapnexpcmcalbody.so 	./nexeditorsdk/src/main/jniLibs/$abi/libwrapnexpcmcalbody$BUILD_MODULE_POSTFIX.so
		cp ./nexeditorengine/libs/$abi/libwrapnexflaccalbody.so 	./nexeditorsdk/src/main/jniLibs/$abi/libwrapnexflaccalbody$BUILD_MODULE_POSTFIX.so
		if [ "$BUILD_MODULE_AACENC" == "SW_AACENC" ]
		then
		cp ./nexeditorengine/libs/$abi/libnexcalbody_aacenc.so 	./nexeditorsdk/src/main/jniLibs/$abi/libnexcalbody_aacenc$BUILD_MODULE_POSTFIX.so
		fi

	done
}

function rename_aar()
{
	src=$1
	des=$2
	prefix="./nexeditorsdk/build/outputs/aar/"

	mv $prefix$src $prefix$des
	echo "rename $prefix$src -> $prefix$des"
}

function gradle_build()
{
	if [ -d "./nexeditorsdk/build/outputs/aar" ]
	then
		echo "rm -r ./nexeditorsdk/build/outputs/aar/*"
		rm -r ./nexeditorsdk/build/outputs/aar/*
	fi

	case "$TARGET_PROJECT" in
	"Default"|"Kinemaster Debug"|"Kinemaster Release"|"RSupport")
		./gradlew assembleRelease
		;;
  "LGE")
    ./gradlew assembleLgeRelease
    rename_aar "nexeditorsdk-lgeRelease.aar" "nexeditorsdk-release.aar"
    ;;
  "Gionee")
    ./gradlew assembleGioneeRelease
    rename_aar "nexeditorsdk-gioneeRelease.aar" "nexeditorsdk-release.aar"
    ;;
	"Xiaomi")
		./gradlew assembleXiaomiRelease
		rename_aar "nexeditorsdk-xiaomiRelease.aar" "nexeditorsdk-release.aar"
		;;
	"Transsion")
		./gradlew assembleTranssionRelease
		rename_aar "nexeditorsdk-transsionRelease.aar" "nexeditorsdk-release.aar"
		;;
	"Vivo")
		./gradlew assembleVivoRelease
		rename_aar "nexeditorsdk-vivoRelease.aar" "nexeditorsdk-release.aar"
		;;
	"Tinno")
		./gradlew assembleTinnoRelease
		rename_aar "nexeditorsdk-tinnoRelease.aar" "nexeditorsdk-release.aar"
		;;
	"ZTE")
		./gradlew assembleZteRelease
		rename_aar "nexeditorsdk-zteRelease.aar" "nexeditorsdk-release.aar"
		;;
	"Oppo")
		./gradlew assembleOppoRelease
		rename_aar "nexeditorsdk-oppoRelease.aar" "nexeditorsdk-release.aar"
		;;
	"OnePlus")
		./gradlew assembleOnePlusRelease
		rename_aar "nexeditorsdk-oneplusRelease.aar" "nexeditorsdk-release.aar"
		;;
	"SP")
		./gradlew assembleSPRelease
		rename_aar "nexeditorsdk-SPRelease.aar" "nexeditorsdk-release.aar"
		;;

	*)
		echo "error in gradle_build. execute ./nexeditor_build again"
		exit 0
		;;
	esac

	ERR=$?
    if [ $ERR -ne 0 ]; then
        echo "== ERROR: Gradle build"
        exit $ERR;
    fi
}

function is_myos()
{
	case "$(uname -s)" in

	Darwin)
		echo 'Mac'
		;;

	Linux)
		echo 'Linux'
		;;

	CYGWIN*|MINGW32*|MSYS*)
		echo 'Windows'
		;;

	*)
		echo 'otherOS' 
		;;
	esac
}


function config_secure()
{

	if [ ! -f $SECURE_CONFIG_PATH ]
	then
		echo "cannot secure config '$SECURE_CONFIG_PATH': No such file or directory "
		return 0
	fi
	
	exec < $SECURE_CONFIG_PATH
	option=""
	while read line || [ -n "$line" ];
	do
		option="$option $line"
	done

	secure_dll_tool_non_static=""
	if [ "$(is_myos)" != "Windows" ]
	then
		echo "myos is not windows. so execute nexsecure_tool_non_static."
		secure_dll_tool_non_static="secure_dll_tool_non_static"
	else
		echo "myos is windows. so execute secure_dll_tool_non_static.exe."
		secure_dll_tool_non_static="secure_dll_tool_non_static.exe"
	fi

	cd ./nexsecureconsole/
	g++ *.cpp -o $secure_dll_tool_non_static
	app_abis=$(echo $BUILD_APP_ABI | tr " " "\n")
	for abi in $app_abis
	do
		if [ ! -f "../nexeditorsdk/src/main/jniLibs/$abi/libnexeditorsdk$BUILD_MODULE_POSTFIX.so" ]
		then
			echo "cannot secure config './nexeditorsdk/src/main/jniLibs/$abi/libnexeditorsdk$BUILD_MODULE_POSTFIX.so': No such file or directory "
			return 0
		fi

	    echo "config_secure -> $abi"
	    echo "./$secure_dll_tool_non_static ../nexeditorsdk/src/main/jniLibs/$abi/libnexeditorsdk$BUILD_MODULE_POSTFIX.so -u $option"
		./$secure_dll_tool_non_static ../nexeditorsdk/src/main/jniLibs/$abi/libnexeditorsdk$BUILD_MODULE_POSTFIX.so -u $option
	done
	cd ..

	return 1
}

function replace_in_file()
{
	src=$1
	des=$2

	for file in $(find ./nexeditorsdk/src/main/java ! -path "*/.svn/*" -type f);
	do
		sed -i "" 's/'"$src"'/'"$des"'/g' $file
		echo "replce $src -> $des in $file"
	done
	mv "./nexeditorsdk/src/main/java/org/"$1 "./nexeditorsdk/src/main/java/org/"$2
}

function is_number()
{
	re='^[0-9]+$'
	if ! [[ $1 =~ $re ]] ; 
	then
		return 0
	fi	
	return 1
}

function choosecombo()
{
	project_num=$1
	abi_num=$2
	build_option=$3

	is_number "$project_num"
	if [ $? == 0 ]
	then
		echo "incorrect project number. retry again!!"
		choosecombo_help
		exit 1
	fi

	is_number "$abi_num"
	if [ $? == 0 ]
	then
		echo "incorrect abi number. retry again!!"
		choosecombo_help
		exit 1
	fi

	if [[ "$project_num" -gt ${#BUILD_PROJECT_ARRAY[@]} ]]
	then
		echo "input project number > project array length. retry again!!"
		choosecombo_help
		exit 1
	fi

	if [[ "$abi_num" -gt ${#BUILD_ABI_ARRAY[@]} ]]
	then
		echo "input abi number > abi array length. retry again!!"
		choosecombo_help
		exit 1
	fi

	echo "selected project is ${BUILD_PROJECT_ARRAY[$project_num-1]}"
	TARGET_PROJECT=${BUILD_PROJECT_ARRAY[$project_num-1]}

	echo "selected abi is ${BUILD_ABI_ARRAY[$abi_num-1]}"
	BUILD_APP_ABI=${BUILD_ABI_ARRAY[$abi_num-1]}
	
	if [ "$build_option" == "-C" ] || [ "$build_option" == "-c" ] || [ "$build_option" == "--clean-build" ]
	then
		set_build_option "-B"
	elif [ "$build_option" == "" ]
	then
		if [ -f $TARGET_PROJECT_PATH ]
		then
			while read line || [ -n "$line" ];
			do
				echo "You have selected $line before. If you select another project, script will execute clean build."
				previous_target_project=$line
				if [ "$previous_target_project" != "$TARGET_PROJECT" ]
				then
					set_build_option "-B"
				fi
			done < $TARGET_PROJECT_PATH
		fi
	else
		echo "input correct option. retry again!!"
		choosecombo_help
		exit 1
	fi


}

function copy_asset()
{
	if [ -d "./nexeditorsdk/src/main/assets" ]
	then
	 	rm -r "./nexeditorsdk/src/main/assets"
	fi

	case "$TARGET_PROJECT" in
	"LGE"|"Default"|"Kinemaster Debug"|"Kinemaster Release"|"Gionee"|"RSupport"|"Vivo"|"ZTE"|"Tinno"|"Oppo"|"OnePlus"|"SP")
		if [ "$(is_myos)" == "Windows" ]
		then
			echo "cp ./assets/default/ 	./nexeditorsdk/src/main/"
			cp -r ./assets/default/ ./nexeditorsdk/src/main/

			echo "mv ./nexeditorsdk/src/main/default ./nexeditorsdk/src/main/assets"
			mv ./nexeditorsdk/src/main/default ./nexeditorsdk/src/main/assets
		else
			mkdir ./nexeditorsdk/src/main/assets/

			echo "cp ./assets/default/ 	./nexeditorsdk/src/main/assets/"
			cp -r ./assets/default/ ./nexeditorsdk/src/main/assets/
		fi
		;;
	"Xiaomi")
		if [ "$(is_myos)" == "Windows" ]
		then
			echo "cp ./assets/xiaomi/ 	./nexeditorsdk/src/main/"
			cp -r ./assets/xiaomi/ ./nexeditorsdk/src/main/

			echo "mv ./nexeditorsdk/src/main/xiaomi ./nexeditorsdk/src/main/assets"
			mv ./nexeditorsdk/src/main/xiaomi ./nexeditorsdk/src/main/assets
		else
			mkdir ./nexeditorsdk/src/main/assets/

			echo "cp ./assets/xiaomi/ 	./nexeditorsdk/src/main/assets/"
			cp -r ./assets/xiaomi/ ./nexeditorsdk/src/main/assets/
		fi
		;;
	"Transsion")
		if [ "$(is_myos)" == "Windows" ]
		then
			echo "cp ./assets/transsion/ 	./nexeditorsdk/src/main/"
			cp -r ./assets/transsion/ ./nexeditorsdk/src/main/

			echo "mv ./nexeditorsdk/src/main/transsion ./nexeditorsdk/src/main/assets"
			mv ./nexeditorsdk/src/main/transsion ./nexeditorsdk/src/main/assets
		else
			mkdir ./nexeditorsdk/src/main/assets/

			echo "cp ./assets/transsion/ 	./nexeditorsdk/src/main/assets/"
			cp -r ./assets/transsion/ ./nexeditorsdk/src/main/assets/
		fi
		;;
	*)
		echo "error in get target project 1. execute ./nexeditor_build again"
		exit 0
		;;
	esac
	return 1
}

function remove_asset()
{
	if [ -d "./nexeditorsdk/src/main/assets" ]
	then
		rm -r "./nexeditorsdk/src/main/assets" 
	else
		echo "./nexeditorsdk/src/main/assets already removed."
	fi

	date +"%T"
}
function copy_nexvision()
{
	if [ -f "../DemoApp/ApiDemos/nexfacedetector-release/nexfacedetector-release.aar" ]
	then
	 	rm -r "../DemoApp/ApiDemos/nexfacedetector-release/nexfacedetector-release.aar"
	fi
    case "$BUILD_APP_ABI" in
    "armeabi-v7a")
        echo "./nexvision/32/nexfacedetector-release.aar ../DemoApp/ApiDemos/nexfacedetector-release"
        cp ./nexvision/32/nexfacedetector-release.aar ../DemoApp/ApiDemos/nexfacedetector-release
        ;;
    "arm64-v8a")
        echo "./nexvision/64/nexfacedetector-release.aar ../DemoApp/ApiDemos/nexfacedetector-release"
        cp ./nexvision/64/nexfacedetector-release.aar ../DemoApp/ApiDemos/nexfacedetector-release
        ;;
    "armeabi-v7a arm64-v8a")
        echo "./nexvision/64/nexfacedetector-release.aar ../DemoApp/ApiDemos/nexfacedetector-release"
        cp ./nexvision/64/nexfacedetector-release.aar ../DemoApp/ApiDemos/nexfacedetector-release
        ;;
    "armeabi-v7a arm64-v8a x86 x86_64")
        echo "./nexvision/64/nexfacedetector-release.aar ../DemoApp/ApiDemos/nexfacedetector-release"
        cp ./nexvision/64/nexfacedetector-release.aar ../DemoApp/ApiDemos/nexfacedetector-release
        ;;
    esac
}

function copy_scmb()
{
	if [ -f "../DemoApp/ApiDemos/scmbsdk-release/scmbsdk-release.aar" ]
	then
	 	rm -r "../DemoApp/ApiDemos/scmbsdk-release/scmbsdk-release.aar"
	fi
    case "$BUILD_APP_ABI" in
    "armeabi-v7a")
        echo "./scmb/32/scmbsdk-release.aar ../DemoApp/ApiDemos/scmbsdk-release"
        cp ./scmb/32/scmbsdk-release.aar ../DemoApp/ApiDemos/scmbsdk-release
        ;;
    "arm64-v8a")
        echo "./scmb/64/scmbsdk-release.aar ../DemoApp/ApiDemos/scmbsdk-release"
        cp ./scmb/64/scmbsdk-release.aar ../DemoApp/ApiDemos/scmbsdk-release
        ;;
    "armeabi-v7a arm64-v8a")
        echo "./scmb/eabi-all/scmbsdk-release.aar ../DemoApp/ApiDemos/scmbsdk-release"
        cp ./scmb/eabi-all/scmbsdk-release.aar ../DemoApp/ApiDemos/scmbsdk-release
        ;;
    "armeabi-v7a arm64-v8a x86 x86_64")
        echo "./scmb/eabi-all/scmbsdk-release.aar ../DemoApp/ApiDemos/scmbsdk-release"
        cp ./scmb/eabi-all/scmbsdk-release.aar ../DemoApp/ApiDemos/scmbsdk-release
        ;;
    esac
}

function copy_anigif()
{
	if [ -f "../DemoApp/ApiDemos/anigifsdk-release/anigifsdk-release.aar" ]
	then
	 	rm -r "../DemoApp/ApiDemos/anigifsdk-release/anigifsdk-release.aar"
	fi
    case "$BUILD_APP_ABI" in
    "armeabi-v7a")
        echo "./anigif/32/anigifsdk-release.aar ../DemoApp/ApiDemos/anigifsdk-release"
        cp ./anigif/32/anigifsdk-release.aar ../DemoApp/ApiDemos/anigifsdk-release
        ;;
    "arm64-v8a")
        echo "./anigif/64/anigifsdk-release.aar ../DemoApp/ApiDemos/anigifsdk-release"
        cp ./anigif/64/anigifsdk-release.aar ../DemoApp/ApiDemos/anigifsdk-release
        ;;
    "armeabi-v7a arm64-v8a")
        echo "./anigif/eabi-all/anigifsdk-release.aar ../DemoApp/ApiDemos/anigifsdk-release"
        cp ./anigif/eabi-all/anigifsdk-release.aar ../DemoApp/ApiDemos/anigifsdk-release
        ;;
    "armeabi-v7a arm64-v8a x86 x86_64")
        echo "./anigif/eabi-all/anigifsdk-release.aar ../DemoApp/ApiDemos/anigifsdk-release"
        cp ./anigif/eabi-all/anigifsdk-release.aar ../DemoApp/ApiDemos/anigifsdk-release
        ;;
    esac
}

function init_keyczar_path()
{
	echo "change keyczar path."
	case "$TARGET_PROJECT" in
	"LGE")
		lge_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $lge_keyczar_path ]
		then
			echo "'$lge_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	"Default")
		default_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $default_keyczar_path ]
		then
			echo "'$default_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	"Kinemaster Debug")
		kinemaster_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $kinemaster_keyczar_path ]
		then
			echo "'$kinemaster_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	"Kinemaster Release")
		kinemaster_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $kinemaster_keyczar_path ]
		then
			echo "'$kinemaster_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	"Gionee")
		gionee_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $gionee_keyczar_path ]
		then
			echo "'$gionee_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	"RSupport")
		rsuport_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $rsuport_keyczar_path ]
		then
			echo "'$rsuport_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	"Xiaomi")
		xiaomi_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $xiaomi_keyczar_path ]
		then
			echo "'$xiaomi_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	"Transsion")
		transsion_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $transsion_keyczar_path ]
		then
			echo "'$transsion_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	"Tinno")
		tinno_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $tinno_keyczar_path ]
		then
			echo "'$tinno_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	"ZTE")
		zte_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $zte_keyczar_path ]
		then
			echo "'$zte_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	"Vivo")
		vivo_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $vivo_keyczar_path ]
		then
			echo "'$vivo_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	"Oppo")
		oppo_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $oppo_keyczar_path ]
		then
			echo "'$oppo_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	"OnePlus")
		oneplus_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $oneplus_keyczar_path ]
		then
			echo "'$oneplus_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	"SP")
		sp_keyczar_path="./nexeditorsdk/src/main/java/org/keyczar"
		if [ -d $sp_keyczar_path ]
		then
			echo "'$sp_keyczar_path' already changed."
			return 0
		else
			replace_in_file "keyczar_nex" "keyczar"
		fi
		;;
	*)
		echo "error in get target project 2. execute ./nexeditor_build again"
		exit 0
		;;
	esac
	return 1
}

function deinit_keyczar_path()
{
	case "$TARGET_PROJECT" in
	"LGE")
		;;
	"Default")
		;;
	"Kinemaster Debug")
		;;
	"Kinemaster Release")
		;;
	"Gionee")
		;;
	"RSupport")
		;;
	"Xiaomi")
		;;
	"Transsion")
		;;
	"Tinno")
		;;
	"ZTE")
		;;
	"Vivo")
		;;
	"Oppo")
		;;
	"OnePlus")
		;;
	"SP")
		;;
	*)
		echo "error in get target project 3. execute ./nexeditor_build again"
		exit 0
		;;
	esac
	return 1
}

function set_build_script()
{
	BUILD_SCRIPT="Android_ndk.mk"
}

function set_secure_config()
{
	case "$TARGET_PROJECT" in
	"LGE")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_LGE.config"
		;;
	"Default")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_Default.config"
		;;
	"Kinemaster Debug")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_Kinemaster.config"
		;;
	"Kinemaster Release")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_Kinemaster.config"
		;;
	"Gionee")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_Gionee.config"
		;;
	"RSupport")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_RSupport.config"
		;;
	"Xiaomi")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_Xiaomi.config"
		;;
	"Transsion")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_Transsion.config"
		;;
	"Tinno")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_Tinno.config"
		;;
	"ZTE")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_ZTETranssion.config"
		;;
	"Vivo")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_Vivo.config"
		;;
	"Oppo")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_Oppo.config"
		;;
	"OnePlus")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_OnePlus.config"
		;;
	"SP")
		SECURE_CONFIG_PATH="./nexsecureconsole/config/nexeditor_secure_SP.config"
		;;
	*)
		echo "error in get target project 4. execute ./nexeditor_build again"
		exit 0
		;;
	esac
}

function set_build_app_cflag()
{
	case "$TARGET_PROJECT" in
	"LGE")
		BUILD_APP_CFLAG="FOR_PROJECT_LGE"
#		BUILD_MODULE_AACENC="SW_AACENC"
		;;
	"Default")
		BUILD_APP_CFLAG="FOR_PROJECT_Default"
		;;
	"Kinemaster Debug")
		BUILD_APP_CFLAG="FOR_PROJECT_Kinemaster"
		BUILD_APP_EXTRA_CFLAG="NX_CERT_DEBUG_MODE"
		;;
	"Kinemaster Release")
		BUILD_APP_CFLAG="FOR_PROJECT_Kinemaster"
		BUILD_APP_EXTRA_CFLAG="NEX"
		;;
	"Gionee")
		BUILD_APP_CFLAG="FOR_PROJECT_Gionee"
		;;
	"RSupport")
		BUILD_APP_CFLAG="FOR_PROJECT_RSupport"
		;;
	"Xiaomi")
		BUILD_APP_CFLAG="FOR_PROJECT_Xiaomi"
		;;
	"Transsion")
		BUILD_APP_CFLAG="FOR_PROJECT_Transsion"
		;;
	"Tinno")
		BUILD_APP_CFLAG="FOR_PROJECT_Tinno"
		;;
	"ZTE")
		BUILD_APP_CFLAG="FOR_PROJECT_ZTE"
		;;
	"Vivo")
		BUILD_APP_CFLAG="FOR_PROJECT_Vivo"
		;;
	"Oppo")
		BUILD_APP_CFLAG="FOR_PROJECT_Oppo"
		;;
	"OnePlus")
		BUILD_APP_CFLAG="FOR_PROJECT_OnePlus"
		;;
	"SP")
		BUILD_MODULE_POSTFIX="_sp"
		BUILD_APP_CFLAG="FOR_PROJECT_SP"
		;;
	*)
		echo "error in get target project 5. execute ./nexeditor_build again"
		exit 0
		;;
	esac
}

function set_target_project()
{
	previous_target_project=""
	echo "What is your target project ?"

	select TARGET_PROJECT in "${BUILD_PROJECT_ARRAY[@]}"
	do	
		echo "You have selected $TARGET_PROJECT project."
		if [ -f $TARGET_PROJECT_PATH ]
		then
			while read line || [ -n "$line" ];
			do
				echo "You have selected $line before. If you select another project, script will execute clean build."
				previous_target_project=$line
				if [ "$previous_target_project" != "$TARGET_PROJECT" ]
				then
					set_build_option "-B"
				fi

				if [ "$1" == "-GB" ] || [ "$1" == "-gb" ] || [ "$1" == "--gradle-build" ]
				then
					echo "ndk-build target($previous_target_project) and gradle-build target($TARGET_PROJECT) do not correspond. so retry again."
					return 0
				fi
			done < $TARGET_PROJECT_PATH
		fi
		break
	done
	return 1
}

function set_application_binary_interface()
{
	# if temporarily target is LGE, do not select application binary interface
	# if [ $TARGET_PROJECT == "LGE" ]
	# then
	# 	BUILD_APP_ABI="armeabi-v7a"
	# 	return 1
	# fi
	
	echo "What is your application binary interface ?"

	select BUILD_APP_ABI in "${BUILD_ABI_ARRAY[@]}"
	do	
		echo "You have selected $BUILD_APP_ABI project."
		case "$BUILD_APP_ABI" in
		"armeabi-v7a")
			BUILD_APP_ABI="armeabi-v7a"
			;;
		"arm64-v8a")
			BUILD_APP_ABI="arm64-v8a"
			;;
		"x86")
			BUILD_APP_ABI="x86"
			;;
		"x86_64")
			BUILD_APP_ABI="x86_64"
			;;	
		"Android(armeabi-v7a arm64-v8a)")
			BUILD_APP_ABI="armeabi-v7a arm64-v8a"
			;;	
		"KineMaster(armeabi-v7a x86)")
			BUILD_APP_ABI="armeabi-v7a x86"
			;;
		"All(armeabi-v7a arm64-v8a x86 x86_64)")
			BUILD_APP_ABI="arm64-v8a armeabi-v7a x86 x86_64"
			;;
		*)
			echo "error in get application binary interface. execute ./nexeditor_build again"
			exit 0
			;;
		esac
		break
	done
	return 1
}

function set_build_option()
{
	BUILD_OPTION=$1
}

function set_build_app_platform()
{
	BUILD_APP_PLATFORM=$1
}

function prepare_native_libs()
{
	# set ndk build option
	set_build_script
	set_build_app_cflag
	
	# ndk build
	ndk_build
	
	# save previous target project to file
	write_target_project_to_file
	
	# copy native librarys to jniLibs
	copy_binarys_from_engine_to_sdk
	
	# config nexsecure
	set_secure_config
	
	config_secure
	if [ $? -eq 0 ]
	then
		exit 1
	fi

	return 0
}

function prepare_package()
{
	# build native libraries
	prepare_native_libs

	if [ $? -ne 0 ]
	then
		exit 1
	fi
	
	# copy assets
	copy_asset

	# copy nexvision
	copy_nexvision

	# copy anigif
	copy_anigif

	# copy scmb
	copy_scmb

	# init keyczar path
	init_keyczar_path
	
	# gradle build
	gradle_build

	# deinit keyczar path
	deinit_keyczar_path

	# remove assets
	remove_asset

	# copy aar to nexeditorsdk folder
	echo "cp ./nexeditorsdk/build/outputs/aar/nexeditorsdk-release.aar ../DemoApp/ApiDemos/nexeditorsdk-release"
	cp ./nexeditorsdk/build/outputs/aar/nexeditorsdk-release.aar ../DemoApp/ApiDemos/nexeditorsdk-release

	return 0
}

function copy_binarys_from_sdk_to_package()
{
	TARGET_LIBS_PATH=$1
	# copy so files
	echo "rm -r $TARGET_LIBS_PATH/*"
	rm -r $TARGET_LIBS_PATH/*

	app_abis=$(echo $BUILD_APP_ABI | tr " " "\n")

	for abi in $app_abis
	do
	    echo "copy_binarys_from_sdk_to_package -> $abi"
		echo "cp ./nexeditorsdk/src/main/jniLibs/$abi $TARGET_LIBS_PATH/$abi"

		cp -r ./nexeditorsdk/src/main/jniLibs/$abi $TARGET_LIBS_PATH/$abi
	done
}

function copy_obj_dump_to_package()
{
	TARGET_LIBS_PATH=$1
	# copy so files
	echo "rm -r $TARGET_LIBS_PATH/*"
	rm -r $TARGET_LIBS_PATH/*

	app_abis=$(echo $BUILD_APP_ABI | tr " " "\n")

	for abi in $app_abis
	do
		echo "copy_obj_binarys_from_engine_to_package -> $abi"
	    echo "mkdir $TARGET_LIBS_PATH/$abi"
		mkdir "$TARGET_LIBS_PATH/$abi"

		echo "cp ./nexeditorengine/obj/local/$abi/libnexcralbody_mc_jb.so $TARGET_LIBS_PATH/$abi/libnexcralbody_mc_jb$BUILD_MODULE_POSTFIX.so"
		echo "cp ./nexeditorengine/obj/local/$abi/libnexeditorsdk.so          $TARGET_LIBS_PATH/$abi/libnexeditorsdk$BUILD_MODULE_POSTFIX.so"
		echo "cp ./nexeditorengine/obj/local/$abi/libnexralbody_audio.so  $TARGET_LIBS_PATH/$abi/libnexralbody_audio$BUILD_MODULE_POSTFIX.so"
		echo "cp ./nexeditorengine/obj/local/$abi/libwrapnexpcmcalbody.so  $TARGET_LIBS_PATH/$abi/libwrapnexpcmcalbody$BUILD_MODULE_POSTFIX.so"
		echo "cp ./nexeditorengine/obj/local/$abi/libwrapnexflaccalbody.so  $TARGET_LIBS_PATH/$abi/libwrapnexflaccalbody$BUILD_MODULE_POSTFIX.so"

		if [ "$BUILD_MODULE_AACENC" == "SW_AACENC" ]
		then
			echo "cp ./nexeditorengine/obj/local/$abi/libnexcalbody_aacenc.so  $TARGET_LIBS_PATH/$abi/libnexcalbody_aacenc$BUILD_MODULE_POSTFIX.so"		
		fi

		cp ./nexeditorengine/obj/local/$abi/libnexcralbody_mc_jb.so 	$TARGET_LIBS_PATH/$abi/libnexcralbody_mc_jb$BUILD_MODULE_POSTFIX.so
		cp ./nexeditorengine/obj/local/$abi/libnexeditorsdk.so		$TARGET_LIBS_PATH/$abi/libnexeditorsdk$BUILD_MODULE_POSTFIX.so
		cp ./nexeditorengine/obj/local/$abi/libnexralbody_audio.so 	$TARGET_LIBS_PATH/$abi/libnexralbody_audio$BUILD_MODULE_POSTFIX.so
		cp ./nexeditorengine/obj/local/$abi/libwrapnexpcmcalbody.so 	$TARGET_LIBS_PATH/$abi/libwrapnexpcmcalbody$BUILD_MODULE_POSTFIX.so
		cp ./nexeditorengine/obj/local/$abi/libwrapnexflaccalbody.so 	$TARGET_LIBS_PATH/$abi/libwrapnexflaccalbody$BUILD_MODULE_POSTFIX.so
		if [ "$BUILD_MODULE_AACENC" == "SW_AACENC" ]
		then
		cp ./nexeditorengine/obj/local/$abi/libnexcalbody_aacenc.so 	$TARGET_LIBS_PATH/$abi/libnexcalbody_aacenc$BUILD_MODULE_POSTFIX.so
		fi
	done
}

# Make *.zip file of SDK 
function make_zip()
{
	PACKAGE_PATH=$1
	PACKAGE_FILES_PATH=$2
	ZIP_NAME=$3 #"editorsdk"
	bash ./makezip.sh $PACKAGE_FILES_PATH $ZIP_NAME

	if [ -f "$PACKAGE_FILES_PATH/$ZIP_NAME.zip" ]; then
		echo
		mv -f "$PACKAGE_FILES_PATH/$ZIP_NAME.zip" "$PACKAGE_PATH/"
		echo "== SUCCESSFUL Making $ZIP_NAME.zip! "
		echo
	else
		echo
		echo "== ERROR: zip file was not made. Please check \"packages\" folder or makezip.sh"
		exit 1
	fi
	return 0
}

function describeMessageForSDK() {
	VERSION=$1
	DOWN_URL=$2
	ReleaseNote=$3
	RELEASE_MSG_FILE="$AUTO_RELEASE_DIRECTORY_PATH/release_engine_msg.html"

	echo "Hi<br><br> NexEditor engine $VERSION was released.<br> \
	You can download the SDK from the link below.<br> <a href=\"$DOWN_URL\"> $DOWN_URL</a> <br> <br> \
	Release Note<br>$ReleaseNote <br> <br> \
	<br>Thanks" > $RELEASE_MSG_FILE
}

function describeMessageForApiDemsApp() {
	VERSION=$1
	DOWN_URL=$2
	RELEASE_MSG_FILE="$AUTO_RELEASE_DIRECTORY_PATH/release_app_msg.html"

	echo "Hi<br><br> ApiDemos app $VERSION was released.<br> \
	You can download the app from below link.<br> <a href=\"$DOWN_URL\"> $DOWN_URL</a> <br>
	<br> Thanks" > $RELEASE_MSG_FILE
}

### process
case "$1" in
	# command clean
	"choosecombo_help")
		choosecombo_help
		;;
	"choosecombo")
		# choosecombo
		choosecombo $2 $3 $4

		prepare_package

		;;
	"clean")
		clean
		;;
	"test")
		IN="arm64-v8a armeabi-v7a"

		mails=$(echo $IN | tr " " "\n")

		for addr in $mails
		do
		    echo "> [$addr]"
		done
		;;
	"-GB"|"-gb"|"--gradle-build")
		echo "option -GB: build only gradle"
		
		if [ ! -f $TARGET_PROJECT_PATH ]
		then
			echo "cannot build gradle '$TARGET_PROJECT_PATH': No such file or directory(cannot search ndk build result)."
			exit 0
		fi
		
		# set target project
		set_target_project $1

		if [ $? == 0 ]
		then
			exit 1
		fi

		# set gradle option
		set_build_option "-GB"

		# config nexsecure
		set_secure_config
		
		config_secure
		if [ $? == 0 ]
		then
			exit 1
		fi
		
		# init keyczar path
		init_keyczar_path
		
		# gradle build
		gradle_build

		# deinit keyczar path
		deinit_keyczar_path
		;;
	"-NB"|"-nb"|"--native-build")
		echo "option -NB: build only native"
		
		# set target project and application binary interface
		set_target_project $1
		set_application_binary_interface

		if [ $? == 0 ]
		then
			exit 1
		fi
		
		# set ndk build option
		set_build_script
		set_build_app_cflag

		# ndk build
		ndk_build

		# save previous target project to file
		write_target_project_to_file
		
		# copy native librarys to jniLibs
		copy_binarys_from_engine_to_sdk
		;;
	"-CK"|"-ck"|"--change-keyczarpath")
		replace_in_file "keyczar" "keyczar_nex"
		replace_in_file "keyczar_nex" "keyczar"
		;;
	"-C"|"-c"|"--clean-build"|"")
		echo "build ndk -> build gradle -option $1"

		# set target project and application binary interface
		set_target_project $1
		set_application_binary_interface

		if [ $? == 0 ]
		then
			exit 1
		fi
		
		#set ndk build option
		if [ "$1" == "-C" ] || [ "$1" == "-c" ] || [ "$1" == "--clean-build" ]
		then
			set_build_option "-B"
		fi
		
		prepare_package
    	;;

    "-AR"|"-ar"|"--auto-release")
    	echo "auto release start"
		# if [ "$(is_myos)" == "Windows" ]
		# then
		# 	echo "myos is windows. currently auto-release is supported in mac os"
		# 	exit 1
		# fi

		SAMPLEAPP_PATH="../DemoApp"
		AAR_DIRECTORY_PATH="./nexeditorsdk/build/outputs/aar"



		set_target_project $1
		set_application_binary_interface

		if [ $? == 0 ]
		then
			exit 1
		fi

		# make auto release output
		echo "make directory _OUTPUT"
		cp -R $AUTO_RELEASE_DIRECTORY_PATH/release_template $AUTO_RELEASE_DIRECTORY_PATH/_OUTPUT

		# copy aar
		echo "cp $AAR_DIRECTORY_PATH/nexeditorsdk-release.aar to $AUTO_RELEASE_DIRECTORY_PATH/_OUTPUT/sdk/android_studio"
		cp $AAR_DIRECTORY_PATH/nexeditorsdk-release.aar $AUTO_RELEASE_DIRECTORY_PATH/_OUTPUT/sdk/android_studio

		# copy sample
		echo "cp -r $SAMPLEAPP_PATH/ApiDemos $AUTO_RELEASE_DIRECTORY_PATH/_OUTPUT/sample"
		cp -r $SAMPLEAPP_PATH/ApiDemos $AUTO_RELEASE_DIRECTORY_PATH/_OUTPUT/sample

		# copy arr to sample folder
		echo "cp $AAR_DIRECTORY_PATH/nexeditorsdk-release.aar $AUTO_RELEASE_DIRECTORY_PATH/_OUTPUT/sample/ApiDemos/nexeditorsdk-release"
		cp $AAR_DIRECTORY_PATH/nexeditorsdk-release.aar $AUTO_RELEASE_DIRECTORY_PATH/_OUTPUT/sample/ApiDemos/nexeditorsdk-release

		# remove asset folder
		echo "rm -r $AUTO_RELEASE_DIRECTORY_PATH/_OUTPUT/sample/ApiDemos/app/src/main/assets"
		rm -r $AUTO_RELEASE_DIRECTORY_PATH/_OUTPUT/sample/ApiDemos/app/src/main/assets

		# remove build folder
		echo "rm -r $AUTO_RELEASE_DIRECTORY_PATH/_OUTPUT/sample/ApiDemos/app/build"
		rm -r $AUTO_RELEASE_DIRECTORY_PATH/_OUTPUT/sample/ApiDemos/app/build

    	echo "auto release end"
		;;    

	"-KR"|"-kr"|"--kine-release")
    	echo "release for kinemaster start" $1 
		source ${CURRENT_PATH}/checkversion.sh
		HEADER_FILE=${CURRENT_PATH}/nexeditorengine/nexVideoEditor/inc/NEXVIDEOEDITOR_VideoEditor.h
		EDITORSDK_VERSION=$(getNexEditorVersion $HEADER_FILE)

		RELEASE_NOTE=${CURRENT_PATH}/nexeditor_release_note.md
		LAST_RELEASENOTE_VERSION=$(getReleaseNoteVerion $RELEASE_NOTE)

		if [ $EDITORSDK_VERSION != $LAST_RELEASENOTE_VERSION ]; then
			echo "Version not matched! - SDK version : $EDITORSDK_VERSION / Latest release note version : $LAST_RELEASENOTE_VERSION"
			exit 1
		fi

		echo "NexEditorSDK Ver $EDITORSDK_VERSION Release note lastest version $LAST_RELEASENOTE_VERSION"

		if [ "$2" != "" ]
		then
			EDITORSDK_VERSION=$EDITORSDK_VERSION.$2
		fi

		# make auto release package
		echo "make directory package"
		mkdir $AUTO_RELEASE_DIRECTORY_PATH/package

		TEMP_PACKAGE_PATH="$AUTO_RELEASE_DIRECTORY_PATH/package/tmp"
		echo "make temp directory for package"
		mkdir $TEMP_PACKAGE_PATH

		# step 1 debug build
		echo "## prepare debug libraries start"
		#set project and abi for debug
		# "Kinemaster Debug" "All(armeabi-v7a arm64-v8a x86 x86_64)" "--clean-build"
		
		choosecombo 3 7 "-c"  
		BUILD_APP_ABI="arm64-v8a armeabi-v7a x86 x86_64"
		set_build_option "-B"
		
		#build and prepare packages
		prepare_native_libs
		if [ $? -ne 0 ]
		then
			exit 1
		fi

		# copoy libs to package folder
		echo "make debug directory for package"
		mkdir $TEMP_PACKAGE_PATH/debug
		copy_binarys_from_sdk_to_package $TEMP_PACKAGE_PATH/debug

		#copy obj dump files for debug
		OBJ_DUMP_PATH="$AUTO_RELEASE_DIRECTORY_PATH/package/obj/debug"
		echo "make obj dump directory for package"
		mkdir -p $OBJ_DUMP_PATH
		copy_obj_dump_to_package $OBJ_DUMP_PATH

		# step 2 release build
		echo "## prepare release libraries start"
		#set project and abi for debug
		#"Kinemaster Release" "All(armeabi-v7a arm64-v8a x86 x86_64)" "--clean-build"
		choosecombo 4 7 "-c"
		BUILD_APP_ABI="arm64-v8a armeabi-v7a x86 x86_64"
		set_build_option "-B"
		
		#build and prepare packages
		prepare_native_libs
		if [ $? -ne 0 ]
		then
			exit 1
		fi

		# copoy libs to package folder
		echo "make release directory for package"
		mkdir $TEMP_PACKAGE_PATH/release
		copy_binarys_from_sdk_to_package $TEMP_PACKAGE_PATH/release

		#copy obj dump files for release
		OBJ_DUMP_PATH="$AUTO_RELEASE_DIRECTORY_PATH/package/obj/release"
		echo "make obj dump directory for package"
		mkdir -p $OBJ_DUMP_PATH
		copy_obj_dump_to_package $OBJ_DUMP_PATH

		JAVA_FILES_PATH="./nexeditorsdk/src/main/java/com/nexstreaming/kminternal/nexvideoeditor"
		TARGET_JAVA_FILES_PATH="$TEMP_PACKAGE_PATH"
		echo "make java source directory for package"
		mkdir $TARGET_JAVA_FILES_PATH

		# copy java files
		echo "cp $JAVA_FILES_PATH to $TEMP_PACKAGE_PATH/nexvideoeditor"
		cp -r $JAVA_FILES_PATH $TARGET_JAVA_FILES_PATH

		# copy release note files
		echo "cp $RELEASE_NOTE to $TEMP_PACKAGE_PATH/nexvideoeditor"
		cp  $RELEASE_NOTE $TEMP_PACKAGE_PATH

		# zip package files
		ZIP_NAME="NexEditor_v${EDITORSDK_VERSION}_for_kinemaster"
		make_zip $AUTO_RELEASE_DIRECTORY_PATH/package "$TEMP_PACKAGE_PATH" "$ZIP_NAME"
		ZIP_PATH="$AUTO_RELEASE_DIRECTORY_PATH/package/$ZIP_NAME.zip"

		#remove tmp directory
		echo "rm -r $TEMP_PACKAGE_PATH"
		rm -r $TEMP_PACKAGE_PATH

		# extract release note for this version
		ReleaseNote=$(getReleaseNote "$RELEASE_NOTE")

		#upload zip to google drive
		source ${CURRENT_PATH}/upload_to_gdrive.sh
		DOWNLOD_URL=$(uploadToEditorSDK "$ZIP_PATH")

		describeMessageForSDK ${EDITORSDK_VERSION} "$DOWNLOD_URL" "$ReleaseNote"

		# zip obj dump files
		ZIP_NAME="NexEditor_objs_v${EDITORSDK_VERSION}_for_kinemaster"
		make_zip $AUTO_RELEASE_DIRECTORY_PATH/package "$AUTO_RELEASE_DIRECTORY_PATH/package/obj/" "$ZIP_NAME"
		ZIP_PATH="$AUTO_RELEASE_DIRECTORY_PATH/package/$ZIP_NAME.zip"

		#upload obj_zip to google drive
		DOWNLOD_URL=$(uploadToEditorObjDump "$ZIP_PATH")

    	echo "kinemaster release end"
		;;    

	"-AD"|"-ad"|"--apidemos")
    	echo "build apk for ApiDemos start" $1 $2
		source ${CURRENT_PATH}/checkversion.sh
		HEADER_FILE=${CURRENT_PATH}/nexeditorengine/nexVideoEditor/inc/NEXVIDEOEDITOR_VideoEditor.h
		EDITORSDK_VERSION=$(getNexEditorVersion $HEADER_FILE)

		TARGET_PROJECT_PATH="../DemoApp/ApiDemos"
		APK_OUTPUT_PATH=$AUTO_RELEASE_DIRECTORY_PATH

		if [ "$2" != "" ]
		then
			EDITORSDK_VERSION=$EDITORSDK_VERSION.$2
		fi
		echo "apk version $EDITORSDK_VERSION"

		# step 1 debug build
		echo "## prepare debug libraries start"
		#set project and abi for debug
		# "Default" "All(armeabi-v7a arm64-v8a x86 x86_64)" "--clean-build"
		choosecombo 2 7 "-c"  
		#BUILD_APP_ABI="arm64-v8a armeabi-v7a x86 x86_64"
		# there are some problem when abi were all.
		BUILD_APP_ABI="armeabi-v7a"
		set_build_option "-B"

		#build and prepare packages
		prepare_package
		if [ $? -ne 0 ]
		then
			exit 1
		fi

		#build ApiDemos apk
		APK_PATH="${APK_OUTPUT_PATH}/ApiDemos-release-ver${EDITORSDK_VERSION}.apk"
		bash ./build_demo.sh "$APK_PATH"
		if [ $? -ne 0 ]
		then
			exit 1
		fi

		#upload apk to google drive
		source ${CURRENT_PATH}/upload_to_gdrive.sh
		DOWNLOD_URL=$(uploadToApiDemos "$APK_PATH")

		describeMessageForApiDemsApp ${EDITORSDK_VERSION} $DOWNLOD_URL
    	echo "build ApiDemos end"
		;;    
	
	"--test")

		;;
	*)
		help
		;;
esac

exit 0
